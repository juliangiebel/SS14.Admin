@page "/bans"
@using System.Security.Claims
@using Content.Server.Database
@using Microsoft.EntityFrameworkCore
@using SS14.Admin.Helpers
@using SS14.Admin.Pages
@using Microsoft.AspNetCore.Components.QuickGrid
@rendermode InteractiveServer
@inject PostgresServerDbContext DbContext
@inject BanHelper BanHelper

<PageTitle>Bans</PageTitle>

<h1>Bans</h1>

<div class="flex gap-1">
    <AuthorizeView Roles="MASSBAN">
        <Authorized>
            <NavLink href="./CreateMassBan" class="button button-primary">Create new Mass Ban</NavLink>
        </Authorized>
    </AuthorizeView>
    <AuthorizeView Roles="BAN">
        <Authorized>
            <NavLink href="./CreateBan" class="button button-primary">Create new Ban</NavLink>
        </Authorized>
    </AuthorizeView>
</div>

<QuickGrid Items="BansQuery()" RowClassSelector="HighlightRow" PageSize="50">
    <PropertyColumn Property="@(ban => ban.Player != null ? ban.Player.LastSeenUserName : null)" Title="Name" Sortable="true" />
    <PropertyColumn Property="@(ban => ban.Ban.Reason)" Title="Reason" Sortable="true" />
    <PropertyColumn Property="@(ban => ban.Ban.BanTime)" Title="Ban Time" Format="yyyy-MM-dd HH:mm:ss" Sortable="true" />
    <PropertyColumn Property="@(ban => ban.Ban.Round)" Title="Round" Sortable="true" />
    <PropertyColumn Property="@(ban => ban.Ban.ExpirationTime)" Title="Expires" Format="yyyy-MM-dd HH:mm:ss" Sortable="true" />
    <PropertyColumn Property="@(ban => ban.Admin)" Title="Banning Admin" Sortable="true" />
    <PropertyColumn Property="@(ban => ban.Ban.BanHits)" Title="Hits" Sortable="true" />
    <TemplateColumn Title="Actions">
        @*@if (ConfirmingUnbanId == context.Id)
        {
            <div>
                <button class="btn btn-danger" @onclick="@(() => ConfirmUnban(context.Id))">Confirm</button>
                <button class="btn btn-secondary" @onclick="@(() => CancelConfirmation())">Cancel</button>
            </div>
        }
        else
        {
            <button class="btn btn-warning" disabled="@(!context.Active)" @onclick="@(() => ShowConfirmation(context.Id))">
                Unban
            </button>
        }*@
    </TemplateColumn>
</QuickGrid>

@code {
    private int? ConfirmingUnbanId { get; set; }
    private string? SearchQuery { get; set; }
    private string ShowFilter { get; set; } = "Active";

    private IQueryable<BanHelper.BanJoin<ServerBan, ServerUnban>> BansQuery()
    {
        var user = ClaimsPrincipal.Current;
        return SearchHelper.SearchServerBans(BanHelper.CreateServerBanJoin(), SearchQuery, user);
    }

    /*private async ValueTask<ItemsProviderResult<BansModel.Ban>> LoadBansAsync(ItemsProviderRequest request)
    {
        var bansQuery = SearchHelper.SearchServerBans(_banHelper.CreateServerBanJoin(), SearchQuery, User);

        // Filter bans based on active, expired, or all
        bansQuery = ShowFilter switch
        {
            "Active" => bansQuery.Where(b => b.Ban.Unban == null && (b.Ban.ExpirationTime == null || b.Ban.ExpirationTime > DateTime.UtcNow)),
            "Expired" => bansQuery.Where(b => b.Ban.Unban != null || b.Ban.ExpirationTime < DateTime.UtcNow),
            _ => bansQuery
        };

        // Apply sorting from QuickGrid
        if (!string.IsNullOrEmpty(request.SortExpression))
        {
            bansQuery = request.SortDirection == SortDirection.Descending
                ? bansQuery.OrderByDescending(request.SortExpression)
                : bansQuery.OrderBy(request.SortExpression);
        }

        // Fetch paginated data
        var totalCount = await bansQuery.CountAsync();
        var data = await bansQuery.Skip(request.StartIndex).Take(request.Count).ToListAsync();

        return new ItemsProviderResult<BansModel.Ban>(data, totalCount);
    }*/

    private async Task ConfirmUnban(int banId)
    {
        var ban = await DbContext.Ban.Include(b => b.Unban).SingleOrDefaultAsync(b => b.Id == banId);
        if (ban == null || ban.Unban != null)
        {
            ConfirmingUnbanId = null;
            return;
        }

        ban.Unban = new ServerUnban
        {
            Ban = ban,
            //UnbanningAdmin = User.Claims.GetUserId(),
            UnbanTime = DateTime.UtcNow
        };

        await DbContext.SaveChangesAsync();
        ConfirmingUnbanId = null;
    }

    private void ShowConfirmation(int banId)
    {
        ConfirmingUnbanId = banId;
    }

    private void CancelConfirmation()
    {
        ConfirmingUnbanId = null;
    }

    private string HighlightRow(BansModel.Ban ban) => ban.Id == ConfirmingUnbanId ? "table-warning" : string.Empty;
}
