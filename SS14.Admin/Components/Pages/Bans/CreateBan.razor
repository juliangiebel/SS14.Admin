@page "/bans/createban"
@using Content.Server.Database
@using Content.Shared.Database
@using SS14.Admin.Helpers
@inject PostgresServerDbContext DbContext
@inject BanHelper BanHelper

<PageTitle>Create new ban</PageTitle>

<h1>Create new ban</h1>

@if (!string.IsNullOrEmpty(StatusMessage))
{
    <div class="alert alert-success">@StatusMessage</div>
}
@if (!string.IsNullOrEmpty(StatusError))
{
    <div class="alert alert-danger">@StatusError</div>
}

<form id="CreateBanForm" onsubmit="HandleFormSubmit">
    <div class="form-group row">
        <label for="nameOrUid" class="col-sm-3 col-form-label">Name or user ID</label>
        <div class="col-sm-9">
            <input id="nameOrUid" name="nameOrUid" value="@Input.NameOrUid" class="form-control" />
        </div>
    </div>

    <div class="form-group row">
        <label for="ipAddress" class="col-sm-3 col-form-label">IP address/CIDR</label>
        <div class="col-sm-9">
            <div class="row">
                <div class="col-sm">
                    <input id="ipAddress" name="ipAddress" value="@Input.IP" class="form-control" />
                </div>
                <div class="col-sm-auto align-items-center d-flex">
                    <input id="useLatestIp" name="useLatestIp" type="checkbox" @checked(Input.UseLatestIp) class="form-check-input" />
                    <label for="useLatestIp" class="form-check-label">Use latest</label>
                </div>
            </div>
        </div>
    </div>

    <div class="form-group row">
        <label for="hwid" class="col-sm-3 col-form-label">HWID</label>
        <div class="col-sm-9">
            <div class="row">
                <div class="col-sm">
                    <input id="hwid" name="hwid" value="@Input.HWid" class="form-control" />
                </div>
                <div class="col-sm-auto align-items-center d-flex">
                    <input id="useLatestHwid" name="useLatestHwid" type="checkbox" @checked(Input.UseLatestHwid) class="form-check-input" />
                    <label for="useLatestHwid" class="form-check-label">Use latest</label>
                </div>
            </div>
        </div>
    </div>

    <div class="form-group row">
        <label for="lengthMinutes" class="col-sm-3 col-form-label">Minutes (0: permanent)</label>
        <div class="col-sm-9">
            <input id="lengthMinutes" name="lengthMinutes" value="@Input.LengthMinutes" type="number" class="form-control" />
        </div>
    </div>

    <div class="form-group row">
        <label for="reason" class="col-sm-3 col-form-label">Reason</label>
        <div class="col-sm-9">
            <textarea id="reason" name="reason" class="form-control">@Input.Reason</textarea>
        </div>
    </div>

    <div class="form-group row">
        <label for="severity" class="col-sm-3 col-form-label">Severity</label>
        <div class="col-sm-9">
            <select id="severity" name="severity" class="form-control">
                @*@foreach (var severity in NoteSeverityHelper.SeverityItems)
                {
                    <option value="@severity.Value" @(Input.Severity == severity.Value ? "selected" : null)>@severity.Text</option>
                }*@
            </select>
        </div>
    </div>

    <div class="form-group row">
        <label for="hidden" class="col-sm-3 col-form-label">Hidden from player</label>
        <div class="col-sm-9">
            <input id="hidden" name="hidden" type="checkbox" @checked(Input.Hidden) class="form-check-input" />
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
</form>

@code {
    private string? StatusMessage { get; set; }
    private string? StatusError { get; set; }

    private InputModel Input { get; set; } = new();

    public sealed class InputModel
    {
        public string? NameOrUid { get; set; }
        public string? IP { get; set; }
        public string? HWid { get; set; }
        public bool UseLatestIp { get; set; }
        public bool UseLatestHwid { get; set; }
        public int LengthMinutes { get; set; }
        public string Reason { get; set; } = string.Empty;
        public NoteSeverity Severity { get; set; }
        public bool Hidden { get; set; }
    }

    private async Task HandleFormSubmit()
    {
        var ban = new ServerBan
        {
            Hidden = Input.Hidden,
            Severity = Input.Severity
        };

        try
        {
            var lastInfo = await BanHelper.GetLastPlayerInfo(Input.NameOrUid);
            if (!lastInfo.HasValue)
            {
                StatusError = "Player not found.";
                return;
            }

            var ipAddr = Input.UseLatestIp ? lastInfo.Value.address.ToString() : Input.IP;
            var hwid = Input.UseLatestHwid ? lastInfo.Value.address.ToString() : Input.HWid;

            var error = await BanHelper.FillBanCommon(
                ban, Input.NameOrUid, ipAddr, hwid, Input.LengthMinutes, Input.Reason);

            if (error != null)
            {
                StatusError = error;
                return;
            }

            DbContext.Ban.Add(ban);
            await DbContext.SaveChangesAsync();

            StatusMessage = "Ban created successfully!";
        }
        catch (Exception ex)
        {
            StatusError = $"An error occurred: {ex.Message}";
        }
    }
}
