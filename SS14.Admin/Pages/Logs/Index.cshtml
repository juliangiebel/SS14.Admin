@page
@using SS14.Admin.AdminLogs
@using SS14.Admin.Helpers
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model SS14.Admin.Pages.Logs.LogsIndexModel

@{
    ViewData["Title"] = "Admin logs";
    var prevDisabled = Model.PageIndex == 0 ? "disabled" : "";
    var nextDisabled = Model.Items.Count == 0 ? "disabled" : "";
    var nextPageIdx = Model.PageIndex + 1;
    var prevPageIdx = Model.PageIndex == 1 ? null : (int?) Model.PageIndex - 1;
}

<style>
    body {
        margin-bottom: 0 !important;
    }

    nav.mb-3 {
        margin-bottom: 0 !important;
    }

    body > .container-fluid {
        padding-left: 0 !important;
        padding-right: 0 !important;
    }

    main.pb-3 {
        padding-bottom: 0 !important;
    }

    /*Specific layout for this page*/
    .data-grid-table {
            grid-template-columns:
            minmax(120px, 0.1fr)
            minmax(110px, 0.1fr)
            minmax(180px, 0.2fr)
            minmax(110px, 0.2fr)
            minmax(150px, 1.5fr);
            max-height: calc(calc(100vh - 116px) - var(--footer-height, 0));
    }

    data-grid-footer {
        padding-top: 0.5rem;
    }
</style>

<data-grid>
    <data-grid-filter class="flex-row">
        <p>Round: </p>
        <input type="number" placeholder="any" id="round-input" value="@Model.RoundId"/>
        <p>Filter: </p>
        <input class="grid-search" id="search" type="text" placeholder="search [ctrl+f]"/>
        <div id="search-popover" class="search-popover hidden" tabindex="1">
            @foreach (var tag in Enum.GetValues<LogFilterTags>())
            {
                <div class="search-result" data-search-tag="@tag.ToString()" tabindex="0">
                    <span class="result-tag">@tag.ToString():</span> <span class="result-content"></span>
                </div>
            }
        </div>
        <p>Date Range: </p>
        <input id="litepicker" type="text" placeholder="Date from - to"/>
        @if (Model.FromDate != default || Model.ToDate != default)
        {
            <button id="litepicker-close" class="btn btn-sm"><i class="fas fa-times"></i>x</button>
        }
        <!-- The dropdown for sort is also temporary until my next PR -->
        <p>Sort: </p>
        <select id="sort-select">
            @foreach (var sortColumn in Enum.GetValues<LogsIndexModel.OrderColumn>())
            {
                <option value="@sortColumn.ToString()" selected="@sortColumn.Equals(Model.Sort)">@sortColumn.ToString()</option>
            }
        </select>
        <div class="applied-filters flex-row">
        </div>
    </data-grid-filter>
    <table class="data-grid-table">
        <thead>
        <tr>
            <th>Server</th>
            <th>Severity</th>
            <th>Date</th>
            <th>Type</th>
            <th>Message</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var entry in Model.Items)
        {
            <tr class="on-click data-log">
                <td>@entry.Round?.Server?.Name</td>
                <td class="text-center colored" style="--cell-color: var(@entry.Impact.CssColorVarName())">@entry.Impact.ToString()</td>
                <td>@entry.Date</td>
                <td>@entry.Type</td>
                <td>@entry.Message</td>
                <template>
                    <div class="log-details-header flex-row" style="--cell-color: var(@entry.Impact.CssColorVarName())">
                        <h2>Details</h2>
                        <span class="details-close fa fa-times" onclick="onDetailsClose()">x</span>
                    </div>
                    <div class="log-details-sub log-muted">
                        <p>Server: <a href="#">@entry.Round?.Server?.Name</a></p>
                        <p>Round: <a href="#">@entry.RoundId</a></p>
                    </div>
                    <h3>Message:</h3>
                    <p>@entry.Message</p>
                    <hr class="line-inset">
                    <h4>Data:</h4>
                    <log-json json="entry.Json"></log-json>
                </template>
            </tr>
        }
        </tbody>
    </table>

    @if (Model.Items.Count == 0)
    {
        <div class="flex-row flex-center">
            <p class="m-4">No log entries found.</p>
        </div>
    }

    <data-grid-footer class="flex-row flex-center">
        <a asp-page="./Index"
           asp-all-route-data="@Model.AllRouteData.ShallowClone()"
           asp-route-pageIndex="@prevPageIdx"
           class="btn btn-primary btn-sm @prevDisabled">
            Previous
        </a>
        <div class="form-horizontal">
            <select name="count" id="count-select" class="form-control form-control-sm" value="@Model.PerPage">
                <option value="100">100</option>
                <option value="250">250</option>
                <option value="500">500</option>
            </select>
        </div>
        <a asp-page="./Index"
           asp-all-route-data="@Model.AllRouteData.ShallowClone()"
           asp-route-pageIndex="@nextPageIdx"
           class="btn btn-primary btn-sm @nextDisabled">
            Next
        </a>
    </data-grid-footer>
</data-grid>
<div class="side-panel-container">
    <div id="side-panel-overlay" class="side-panel-overlay hidden"></div>
    <div id="side-panel" class="side-panel transition-right hidden-right"></div>
</div>

@section scripts {
    <script src="~/js/datepicker.js" asp-append-version="true"></script>
    <script src="~/js/logs-search.js" asp-append-version="true"></script>
    <script src="~/js/logs-grid.js" asp-append-version="true"></script>
}
